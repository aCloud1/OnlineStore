@page "/account"

@using OnlineStore.Services;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime js
@inject OnlineStore.Services.AccountService account_service
@inject OnlineStore.Services.Authentication authentication
@inject NavigationManager nav_manager

<h3>AccountPage</h3>
<div>
	<AuthorizeView>
		<Authorized>
			<tr>
				<td>First name</td>
				<td>@account?.personal_data.first_name</td>
				<td class="td_button">
					<button>Change</button>
				</td>
			</tr>
			<tr>
				<td>Second name</td>
				<td>@account?.personal_data.second_name</td>
				<td class="td_button">
					<button>Change</button>
				</td>
			</tr>
			<tr>
				<td>Email address</td>
				<td>@account?.email_address</td>
				<td class="td_button">
					<button>Change</button>
				</td>
			</tr>
			<tr>
				<td>Phone number</td>
				<td>@account?.personal_data.phone_number</td>
				<td class="td_button">
					<button>Change</button>
				</td>
			</tr>
			<tr>
				<td>Password</td>
				<td>@account?.password</td>
				<td class="td_button">
					<button>Change</button>
				</td>
			</tr>

			<br />
			<h3>Your transactions</h3>
			@if(account == null || account.transactions.Count == 0)
			{
				<p>You have purchased anything yet.</p>	
			}
			else
			{
				<tr>
					<td>Date</td>
					<td>Transaction ID</td>
					<td>Total</td>
				</tr>
				@foreach(var t in account.transactions)
				{
					<tr>
						<td>@t.date</td>
						<td>@t.id</td>
						<td>@t.total</td>
					</tr>
				}
				<button @onclick="sortTransactionsAsc">Sort ^</button>
				<button @onclick="sortTransactionsDesc">Sort v</button>
			}

			<br />
			<div>
				<h3>Export my personal data as:</h3>
				<button @onclick="exportAccountDataAsText">Text</button>
				<button @onclick="exportAccountDataAsJSON">JSON</button>
				<textarea @bind="dataAsFormattedText"></textarea>
			</div>
		</Authorized>

		<NotAuthorized>
			<a href="/login">Please login</a>
		</NotAuthorized>
	</AuthorizeView>
</div>


@code {
	Account? account;

	string dataAsFormattedText = "";

	protected async override Task OnInitializedAsync()
	{
		AuthenticationState auth = await authentication.GetAuthenticationStateAsync();

		string? account_id = auth.User.Identity.Name;
		if (account_id == null)
		{
			nav_manager.NavigateTo("/login");
		}

		try
		{
			account = account_service.getAccountById(account_id);
		}
		catch
		{

		}

		if (account == null)
		{
			nav_manager.NavigateTo("/login");
		}

		base.OnInitialized();
	}

	public void sortTransactionsAsc()
	{
		account.transactions.Sort((a, b) => b.CompareTo(a));
		StateHasChanged();
	}

	public void sortTransactionsDesc()
	{
		account.transactions.Sort();
		StateHasChanged();
	}

	public void exportAccountDataAsText()
	{
		dataAsFormattedText = account.personal_data.ToString("Text", null);
		StateHasChanged();
	}

	public void exportAccountDataAsJSON()
	{
		dataAsFormattedText = account.personal_data.ToString("JSON", null);
		StateHasChanged();
	}
}
