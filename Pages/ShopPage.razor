@page "/shop"

@using OnlineStore.Database;
@using OnlineStore.Errors;
@using OnlineStore.Domain;
@using OnlineStore.Services;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime js
@inject NavigationManager nav_manager
@inject OnlineStore.Services.AccountService account_service
@inject OnlineStore.Services.Authentication authentication
@inject OnlineStore.Services.ShopService shop_service
@inject OnlineStore.Services.ItemService item_service

<h3>Shop</h3>

<div class="item_list_wrapper">
	<div class="filtering">
		<select @bind="select_shop_id">
		<option value=""></option>
		@foreach (var s in shop_ids)
		{
			<option value="@s.Key">@s.Value</option>
		}
		</select>

		<select @bind="filter_by">
			<option value="@ItemFieldNames.NAME">Name</option>
			<option value="@ItemFieldNames.PRICE">Price</option>
		</select>
		<select @bind="category">
			<option value="@ItemCategory.UNCATEGORIZED"></option>
			<option value="@ItemCategory.NO_CATEGORY">All categories</option>
			<option value="@ItemCategory.CLOTHING">Clothing</option>
			<option value="@ItemCategory.FOOD">Food</option>
			<option value="@ItemCategory.TOOLS">Tools</option>
		</select>
		<input @bind="filter_text_input" />
		<button @onclick="filterItems">Filter</button>
	</div>
	<div class="item_list">
		@foreach (var s in items_in_display)
		{
			<div class="item_wrapper">
				<div class="item_image" @onclick="() => goToProductPage(s.id)">
					<p>Category: @s.category</p>
					<p>@s.id</p>
					<p>@s.name</p>
				</div>
				<div class="item_price">
					<p class="item_price_p">@s.price</p>
				</div>
			</div>
		}
	</div>

</div>

@code {
	Account? account;
	Shop selected_shop;
	List<Shop> shops;

	string select_shop_id;
	Dictionary<string, string> shop_ids;
	ItemFieldNames filter_by;
	ItemCategory category;
	String filter_text_input;
	List<Item> items_in_display;

	public static class Filter
	{
		public static string name;
		public static int price;
		public static ItemCategory category;
	}

	protected async override Task OnInitializedAsync()
	{
		shops = shop_service.listShops();
		shop_ids = new Dictionary<string, string>();
		foreach (var s in shops)
			shop_ids.Add(s.id, s.name);

		items_in_display = shops.First().Items != null ? shops.First().Items : new List<Item>();

		AuthenticationState auth = await authentication.GetAuthenticationStateAsync();
		try
		{
			string account_id = auth.User.Identity.Name;
			account = account_service.getAccountById(account_id);
		}
		catch (Exception e)
		{
			Logger.log("Adding items to anonymous cart.");
		}
		base.OnInitialized();
	}

	public void goToProductPage(string id)
	{
		nav_manager.NavigateTo($"/product/{selected_shop.id}/{id}");
	}

	public async void filterItems()
	{
		try
		{
			if (emptyFieldsExist())
				throw new InvalidInput("category cannot be empty");

			selected_shop = shop_service.getShopById(select_shop_id);
			List<Item> filtered_items = item_service.getItemsByShopId(selected_shop.id);
			if (category != ItemCategory.NO_CATEGORY)
				filtered_items = filtered_items.FindAll(item => item.category == category);

			if (filter_text_input is not null)
			{
				switch (filter_by)
				{
					case ItemFieldNames.NAME:
						// case sensitive!
						filtered_items = filtered_items.FindAll(item => item.name.Contains(filter_text_input));
						break;

					case ItemFieldNames.PRICE:
						double pr;
						if (Double.TryParse(filter_text_input, out pr))
							filtered_items = filtered_items.FindAll(item => item.price >= pr);
						else
							await js.InvokeVoidAsync("alert", $"{filter_text_input} is not a number.");
						break;

					default:
						filtered_items = new List<Item>(filtered_items);
						break;
				}
			}

			items_in_display = filtered_items;
			StateHasChanged();

		}
		catch(Exception e)
		{
			await js.InvokeVoidAsync("alert", $"{e.Message}.");	
		}
	}

	private bool emptyFieldsExist()
	{
		return select_shop_id == "" || category == ItemCategory.UNCATEGORIZED;
	}
}
