@page "/checkout"

@using OnlineStore.Services;
@using OnlineStore.Domain;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime js
@inject OnlineStore.Services.Authentication authentication
@inject OnlineStore.Services.AccountService account_service
@inject OnlineStore.Services.TransactionService transaction_service
@inject OnlineStore.Services.ShoppingCartService shopping_cart_service
@inject NavigationManager nav_manager

<h3>PageCheckout</h3>
<div>
	@if(account == null)
	{
		<p>Loading...</p>
	}
	else
	{
		<tr>
			<td>Item name</td>
			<td>Price</td>
			<td>Category</td>
		</tr>
		@foreach (var item in cart.items)
		{
			<tr>
				<td>@item.name</td>
				<td>@item.price</td>
				<td>@item.category</td>
			</tr>
		}

		<tr>
			<td class="bold">Total</td>
			<td class="bold">@total</td>
		</tr>
		<button @onclick="completeOrder">Complete order</button>
	}
</div>



@code {
	double total;
	Account? account;
	ShoppingCart cart;

	protected async override Task OnInitializedAsync()
	{
		AuthenticationState auth = await authentication.GetAuthenticationStateAsync();
		try
		{
			string account_id = auth.User.Identity.Name;
			account = account_service.getAccountById(account_id);
			//cart = shopping_cart_service.getCartByAccountId(account_id);
			cart = shopping_cart_service[account_id];
			if (cart is null)
			{
				cart = new ShoppingCart();
				//shopping_cart_service.carts.Add(account_id, cart);
				shopping_cart_service[account_id] = cart;
			}

			total = CheckoutService.calculateTotal(
				cart.items
				.Select(item => item.price)
				.ToArray()
			);
		}
		catch 
		{
			Logger.log($"CheckoutPage: account not found.");
		}
		base.OnInitialized();
	}

	private async void completeOrder()
	{
		if (cart.items.Count() == 0)
		{
			await js.InvokeVoidAsync("alert", "Your shopping cart is empty!");
			return;
		}
		else
		{
			Transaction transaction = new Transaction(account.id, total);
			transaction_service.createTransaction(transaction);
			shopping_cart_service.removeCartByAccountId(account.id);
			cart.clear();

			await js.InvokeVoidAsync("alert", "Order completed!");

			nav_manager.NavigateTo("/");
		}
	}
}
