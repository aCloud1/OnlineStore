@page "/login/{user_id}"

@using OnlineStore.Services;
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime js
@inject OnlineStore.Services.AccountService account_service
@inject OnlineStore.Services.Authentication authentication
@inject NavigationManager nav_manager

<div class="login_element">
	<AuthorizeView>
		<Authorized>
			<a href="/account">You are logged in.</a>
		</Authorized>

		<NotAuthorized>
			<div>
				<label>Email</label>
				<input @bind="user_input.email_address"/>
				<label>Password</label>
				<input @bind="user_input.password" type="password" />
			</div>
			<button @onclick="authenticate">Login</button>
			<a href="/register">Registration</a>
			<a href="/forgot_password">Forgot password?</a>
		</NotAuthorized>
	</AuthorizeView>

</div>



@code
{
	[Parameter]
	public string user_id { get; set; }

	class UserInput
	{
		public string email_address { get; set; }
		public string password { get; set; }
	}

	UserInput user_input = new UserInput();
	Account? account;

	protected override void OnParametersSet()
	{
		try
		{
			account = account_service.getAccountById(user_id);
			if (account != null)
				user_input.email_address = account.email_address;
		}
		catch(Exception e)
		{
			Logger.log($"{e.Message}. Prefilling email address field is skipped.");
		}
	}

	private async Task authenticate()
	{
		try
		{
			if(account is null)
				account = account_service.getAccountByEmail(user_input.email_address);
			account_service.matchPasswords(account, user_input.password);
		}
		catch (Exception e)
		{
			Logger.log($"{e.Message}.");
			await js.InvokeVoidAsync("alert", "Email or password is invalid.");
			return;
		}

		await authentication.updateAuthenticationState(new UserSession
			{
				id = account.id,
				role = account.role
			});
		nav_manager.NavigateTo("/", true);
	}

}
