@page "/create-item"

@using OnlineStore.Database;
@using OnlineStore.Domain;
@using OnlineStore.Errors;
@using OnlineStore.Services;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime js
@inject OnlineStore.Services.AccountService account_service
@inject OnlineStore.Services.Authentication authentication
@inject OnlineStore.Services.ShopService shop_service
@inject OnlineStore.Services.ItemService item_service
@inject NavigationManager nav_manager


<h3>Create item</h3>
<div class="create_item_element">
	<div>
		<p>Shop</p>
		<select @bind="select_shop">
			<option value=""></option>
			@foreach (var s in shop_ids)
			{
				<option value="@s.Key">@s.Value</option>
			}
		</select>
		<p>Name</p>
		<input id="name" @bind="name" />
		<p>Price</p>
		<input id="price" @bind="price" />
		<p>Description</p>
		<input id="description" @bind="description" />
		<p>Category</p>
		<select @bind="category">
			<option value="@ItemCategory.FOOD">Food</option>
			<option value="@ItemCategory.CLOTHING">Clothing</option>
			<option value="@ItemCategory.TOOLS">Tools</option>
			<option value="@ItemCategory.NO_CATEGORY">Uncategorized</option>
		</select>
	</div>
	<div>
		<button @onclick="() => create()">Create</button>
	</div>

	<br />
	<h3>Items</h3>
	<tr>
		<td>ID</td>
		<td>Name</td>
		<td>Price</td>
		<td>Description</td>
		<td>Category</td>
		<td>Shop ID</td>
	</tr>
	@foreach (var item in all_items)
	{
		<tr>
			<td>@item.id</td>
			<td>@item.name</td>
			<td>@item.price</td>
			<td>@item.description</td>
			<td>@item.category</td>
			<td>@item.ShopId</td>
			<button @onclick="() => delete(item)">Delete</button>
		</tr>
	}
</div>


@code {
	public string select_shop;
	public List<Shop> shops;
	public List<Item> all_items;
	public string name;
	public int price;
	public string description;
	public ItemCategory category;
	public Dictionary<string, string> shop_ids;


	protected async override Task OnInitializedAsync()
	{
		shops = shop_service.listShops();
		shop_ids = new Dictionary<string, string>();
		foreach (var s in shops)
			shop_ids.Add(s.id, s.name);

		all_items = new List<Item>();
		foreach(Shop s in shops)
		{
			var temp = item_service.getItemsByShopId(s.id);
			all_items.AddRange(temp);
		}

		base.OnInitialized();
	}

	public async void create()
	{
		try
		{
			if (isInputEmpty())
				throw new InvalidInput("only description field can be empty.");

			if (price < 0)
				throw new InvalidInput("price cannot be negative.");

			var shop = shops.Where(s => s.id == select_shop).First();
			if (shop == null)
				throw new InternalError("could not find shop.");

			if (shop.Items == null)
				shop.Items = new List<Item>();

			var item = new Item {
				id = Id.generate(),
				name = name,
				price = (int)price,
				description = description,
				category = category,
				ShopId = shop.id
			};
			shop.Items.Add(item);
			item_service.createItem( item);

			await js.InvokeVoidAsync("alert", $"Success! Item {name} created.");

			StateHasChanged();
			clearFields();
		}
		catch (InvalidInput e)
		{
			await js.InvokeVoidAsync("alert", $"{e.Message}. Try again.");
		}
	}

	public async void delete(Item item)
	{
		try
		{
			item_service.deleteItem(item);
			all_items.Remove(item);
			StateHasChanged();
		}
		catch(Exception e)
		{
			await js.InvokeVoidAsync("alert", $"{e.Message}. Try again.");
		}
	}

	private bool isInputEmpty()
	{
		return name == "" || select_shop is null || select_shop == "" || category == ItemCategory.UNCATEGORIZED;
	}

	private void clearFields()
	{
		name = "";
		price = 0;
		description = "";
		category = ItemCategory.UNCATEGORIZED;
	}
}
