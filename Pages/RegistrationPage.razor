@page "/register"

@using OnlineStore.Database;
@using OnlineStore.Services;
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime js
@inject OnlineStore.Services.AccountService account_service
@inject OnlineStore.Services.Authentication authentication
@inject NavigationManager nav_manager

<div class="registration_element">
	<div>
		<p>First name</p>
		<input id="first_name" @bind="user_input.personal_data.first_name" />
		<p>Second name</p>
		<input id="second_name" @bind="user_input.personal_data.second_name" />
		<p>Phone number</p>
		<input id="phone_number" @bind="user_input.personal_data.phone_number" />
		<p>Email</p>
		<input id="email" @bind="user_input.email" />
		<p>Password</p>
		<input id="password" type="password" @bind="user_input.password" />
	</div>
	<div>
	<input type="checkbox" class="input_checkbox" name="tos" @bind="user_input.agreed_to_tos"/>
	<label for="tos">I have read and agree with <a href="" class="link_tos">Terms of Service</a></label>
	<button @onclick="() => validateInput()">Register</button>
	</div>
</div>



@code {

	public class UserInput
	{
		public Person personal_data;
		public string email;
		public string password;
		public bool agreed_to_tos;

		public UserInput()
		{
			personal_data = new Person();
		}
	}

	UserInput user_input = new UserInput();
	Account? new_account;


	private async Task validateInput()
	{
		if(!user_input.agreed_to_tos)
		{
			await js.InvokeVoidAsync("alert", "You must agree to Terms of Service!");
			return;
		}

		Account? existing_account = null;
		try
		{
			existing_account = account_service.getAccountByEmail(user_input.email);
		}
		catch (Exception e)
		{
			Logger.log($"{e.Message}. Creating with email {user_input.email}.");
		}

		if(existing_account is not null)
		{
			bool confirmed = await js.InvokeAsync<bool>("confirm", "An account with this email address already exists. Do you want to login?");
			if (confirmed)
			{
				nav_manager.NavigateTo($"/login/{existing_account.id}");
				return;
			}

			await js.InvokeVoidAsync("alert", "This email address is taken!");
			return;
		}

		try
		{
			new_account = account_service.createCustomerAccount(
				user_input.email,
				user_input.password,
				user_input.personal_data
				);

			await js.InvokeVoidAsync("alert", "Success!");
			await authentication.updateAuthenticationState(new UserSession(new_account.id, new_account.role));

			// tofix:  here some `id` is missing - exception is thrown
			using (var db = new DatabaseContext()) try {
					db.accounts.Add(new_account);
					db.SaveChanges();
				}catch(Exception e)
				{
					//string errorMessages = string.Join("; ", ex.EntityValidationErrors.SelectMany(x => x.ValidationErrors).Select(x => x.PropertyName + ": " + x.ErrorMessage));
					await js.InvokeVoidAsync("alert", $"{e.Message}.");
				}

			nav_manager.NavigateTo("/", true);
		}
		catch(ArgumentException e)
		{
			await js.InvokeVoidAsync("alert", $"Invalid input - {e.Message}. Try again.");
		}
	}
}
