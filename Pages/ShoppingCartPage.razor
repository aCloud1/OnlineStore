@page "/shoppingcart"

@using OnlineStore.Services;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime js
@inject OnlineStore.Services.AccountService account_service
@inject OnlineStore.Services.Authentication authentication
@inject NavigationManager nav_manager

<h3>Shopping cart:</h3>
<div>
	@if (
		(account == null && anonymous_cart.items.Count == 0) ||
		(account != null && account.shopping_cart.items.Count == 0)
	)
	{
		<p>Empty.</p>
	}
	else if (account == null)
	{
		<p>Loading...</p>
	}
	else
	{
		<tr>
			<td>Item ID</td>
			<td>Price</td>
		</tr>
		@foreach (var item in account.shopping_cart.items)
		{
			<tr>
				<td>@item.id</td>
				<td>@item.price</td>
			</tr>
		}
	}

	<a @onclick="() => goToCheckout()">Go to checkout</a>
</div>



@code {
	Account? account;
	ShoppingCart anonymous_cart = new ShoppingCart();

	protected async override Task OnInitializedAsync()
	{
		/*
			if logged in
				[+] get shopping cart if account has one, else create
			else
				[+] create shopping cart
				[ ] hold it until user logs in or registers and then assign the shopping cart to him
		*/
		AuthenticationState auth = await authentication.GetAuthenticationStateAsync();
		try
		{
			string account_id = auth.User.Identity.Name;
			account = account_service.getAccountById(account_id);
		}
		catch
		{

		}
		base.OnInitialized();
	}

	private async void goToCheckout()
	{
		if(account == null)
		{
			await js.InvokeVoidAsync("alert", "Please login first.");
			return;
		}

		nav_manager.NavigateTo($"/checkout");
	}
}
